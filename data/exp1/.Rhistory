summary(glht(dis.test, linfct=mcp(ID="Tukey")))
summary(glht(dis.test, linfct=mcp(condition="Tukey")))
summary(glht(dis.test, linfct=mcp(set="Tukey")))
dis.test = lmer(dis ~ condition*phase+condition + phase + set+
(1|ID), data=df,REML=FALSE)
dis.test
summary(glht(dis.test, linfct=mcp(condition*phase="Tukey")))
summary(glht(dis.test, linfct(condition*phase="Tukey")))
pairwise.t.test(phase,condition,data=df)
HSD.test(dis.test, "condition", group=TRUE)
library(agricolae)
HSD.test(dis.test, "condition", group=TRUE)
library(phia)
(df.means <- interactionMeans(dis.test))
df.means
dis.test = lmer(dis ~ condition*phase+condition + phase + set+
(1|ID), data=df,REML=FALSE)
dis.test
(df.means <- interactionMeans(dis.test))
dis.test = lmer(dis ~ phase*condition+condition + phase + set+
(1|ID), data=df,REML=FALSE)
dis.test
(df.meanss <- interactionMeans(dis.test))
dis.test2 <- lm(dis ~ condition*phase, data=df)
(df.means <- interactionMeans(dis.test2))
df.means
dis.test2
dis.test2 <- lm(dis ~ phase, data=df)
dis.test2
(df.means <- interactionMeans(dis.test2))
df.means <- interactionMeans(dis.test2)
View(df)
df$phase=as.factor(df$phase)
dis.test2 <- lm(dis ~ phase*condition, data=df)
dis.test2
df.means <- interactionMeans(dis.test2)
df.means
testInteractions(dis.test2, fixed="phase", across="condition")
testInteractions(dis.test2, fixed="condition", across="phase")
testInteractions(dis.test2,residual=c("condition","phase"))
# random slope model #
coefs <- data.frame(coef(summary(dis.test)))
coefs$p <- format.pval(2*(1-pnorm(abs(coefs$t.value))), digits=2, eps=0.0001) #also make the p-values a bit more readable
coefs
anova(dis.null,dis.test)
setwd('//Users/Dave/Documents/projects/Vinson_Jordan_Hund/masters')
library (Foreign) #how to write a table to another file   links - http://www.statmethods.net/input/exportingdata.html
read.spss(Final Data set 4.20.12.sav, use.value.labels = TRUE, to.data.frame = FALSE,
max.value.labels = Inf, trim.factor.names = FALSE,
trim_values = TRUE, reencode = NA, use.missings = to.data.frame)
read.spss(Final Data set 4.20.12.sav)
read.spss("Final Data set 4.20.12.sav", use.value.labels = TRUE, to.data.frame = FALSE,
max.value.labels = Inf, trim.factor.names = FALSE,
trim_values = TRUE, reencode = NA, use.missings = to.data.frame)
library (Foreign) #how to write a table to another file   links - http://www.statmethods.net/input/exportingdata.html
read.spss("Final Data set 4.20.12.sav", use.value.labels = TRUE, to.data.frame = FALSE,
max.value.labels = Inf, trim.factor.names = FALSE,
trim_values = TRUE, reencode = NA, use.missings = to.data.frame)
read.spss("Final Data set 4.20.12.sav", )
f = read.spss("Final Data set 4.20.12.sav", use.value.labels = TRUE, to.data.frame = FALSE,
max.value.labels = Inf, trim.factor.names = FALSE,
trim_values = TRUE, reencode = NA, use.missings = to.data.frame)
library (Foreign) #how to write a table to another file   links - http://www.statmethods.net/input/exportingdata.html
install.packages("foreign")
write.table(f, "/Users/Dave/Desktop/masters/findme.txt", sep="\t")
library (Foreign) #how to write a table to another file   links - http://www.statmethods.net/input/exportingdata.html
library (foreign) #how to write a table to another file   links - http://www.statmethods.net/input/exportingdata.html
f = read.spss("Final Data set 4.20.12.sav", use.value.labels = TRUE, to.data.frame = FALSE,
max.value.labels = Inf, trim.factor.names = FALSE,
trim_values = TRUE, reencode = NA, use.missings = to.data.frame)
f = read.spss("Final Data set 4.20.12.sav", use.value.labels = TRUE, to.data.frame = TRUE,
max.value.labels = Inf, trim.factor.names = FALSE,
trim_values = TRUE, reencode = NA, use.missings = to.data.frame)
View(f)
write.table(f, "/Users/Dave/Desktop/masters/trimme.csv", sep=",")
write.table(f, "/Users/Dave/Desktop/trimme.csv", sep=",")
setwd("/Users/Dave/Documents/projects/Vinson_Zwaan_Matlock/analysis");
dtable = read.table("dave_data_work_data_feb2.xls",header=FALSE,sep="\t")
colnames(dtable) = list('subject','shit','x','y','l','dir','conf','percdist','shit','actdist(shitfornow)','shit')
# perc dist, perang, actdist, actdis act ang dont make sense here.
library(lme4)
library(nlme)
library(languageR)
library(rgl)
library(gplots)
library(ggplot2)
library(reshape2)
library(psych)
library(calibrate)
library(Hmisc)
library(lattice)
library(Zelig)
#language variable
totaly$lang = 0
totaly[totaly$l==0,]$lang = 'backward'
totaly[totaly$l==1,]$lang = 'forward'
# man direction variable
totaly[totaly$dir==0,]$dir = 'DOWN'
totaly[totaly$dir==1,]$dir = 'UP'
#condition variable
totaly$cc = 0
totaly[totaly$lang=='backward'& totaly$dir=='DOWN',]$cc = 'Image:Down,Lang:Backward'
totaly[totaly$lang=='backward' & totaly$dir=='UP',]$cc = 'Image:Up,Lang:Backward'
totaly[totaly$lang=='forward'& totaly$dir=='UP',]$cc = 'Image:Up,Lang:Forward'
totaly[totaly$lang=='forward' & totaly$dir=='DOWN',]$cc = 'Image:Down,Lang:Forward'
totaly[1,] #test
totaly[2,] #test
totaly = dtable
#language variable
totaly$lang = 0
totaly[totaly$l==0,]$lang = 'backward'
totaly[totaly$l==1,]$lang = 'forward'
# man direction variable
totaly[totaly$dir==0,]$dir = 'DOWN'
totaly[totaly$dir==1,]$dir = 'UP'
#condition variable
totaly$cc = 0
totaly[totaly$lang=='backward'& totaly$dir=='DOWN',]$cc = 'Image:Down,Lang:Backward'
totaly[totaly$lang=='backward' & totaly$dir=='UP',]$cc = 'Image:Up,Lang:Backward'
totaly[totaly$lang=='forward'& totaly$dir=='UP',]$cc = 'Image:Up,Lang:Forward'
totaly[totaly$lang=='forward' & totaly$dir=='DOWN',]$cc = 'Image:Down,Lang:Forward'
totaly[1,] #test
totaly[2,] #test
backward=totaly[totaly$lang=="backward",]
forward=totaly[totaly$lang=="forward",]
backward = data.table(backward)
up = totaly[totaly$dir=='UP',]
down = totaly[totaly$dir=='DOWN',]
mean(up$percdist)
#condition variables
c1=down[down$lang=="backward",]
c2=up[up$lang=="backward",]
c3=up[up$lang=="forward",]
c4=down[down$lang=="forward",]
new = rbind(c1,c3)
new1 =rbind(c2,c4)
attach(totaly)
yint = aov(y ~ dir*lang, data=totaly)
summary(yint)
xint = aov(x ~ dir*lang, data=totaly)
summary(xint)
distint = aov(percdist ~ dir*lang, data=totaly)
summary(distint)
fit = aov(percdist~dir,data=backward)
summary(fit)
fit = aov(percdist~dir,data=forward)
summary(fit)
fit = aov(x~dir,data=backward)
summary(fit)
pairwise.t.test(dir*lang,data=totaly)
pairwise.t.test(dir,lang,data=totaly)
pairwise.t.test(x~dir*lang,data=totaly)
p_subs = c(length(x))
p_x = c(mean(x))
p_sdx = c(sd(x))
p_y = c(mean(y))
p_sdy = c(sd(y))
#standard error start and end points
p_exe = c(p_sdx/sqrt(p_subs),0)
p_eye = c(p_sdy/sqrt(p_subs),0)
#for dots on plot
cx=c(mean(x),120)
cy=c(-mean(y),-120)
names=c('Remembered','Actual')
tshit=data.frame(cx,cy,p_exe,p_eye,names)
qplot(cx,cy,color=names,shape=names,data=tshit,group=names,ylab = "Y Coordinate", xlab = "X Coordinate")+
ggtitle("A.   Remembered") +
theme(plot.title = element_text(lineheight=3, face="bold", color="black", size=29))+
theme(axis.title.y = element_text(size = rel(1.8),angle=90))+
theme(axis.title.x = element_text(size = rel(1.8),angle=0))+
theme(legend.text = element_text(colour = 'black', angle = 0, size = 13, hjust = 3, vjust = 3))+
geom_errorbar(aes(ymin=cy+p_eye, ymax=cy-p_eye), width=.1) +
geom_errorbarh(aes(xmin = cx+p_exe, xmax = cx-p_exe),height=.1)+
geom_point(color ="black",size=3)+
geom_line()
# ylim()+
#xlim()
subs = c(length(c1$x),length(c2$x),length(c3$x),length(c4$x))
mx = c(mean(c1$x), mean(c2$x), mean(c3$x), mean(c4$x))
sdx = c(sd(c1$x),sd(c2$x),sd(c3$x),sd(c4$x))
my = c(mean(c1$y), mean(c2$y), mean(c3$y), mean(c4$y))
sdy = c(sd(c1$y),sd(c2$y),sd(c3$y),sd(c4$y))
#standard error start and end points
exs = c(mx-(sdx/sqrt(subs)))
exe = c(mx+(sdx/sqrt(subs)))
eys = c(my-(sdy/sqrt(subs)))
eye = c(my+(sdy/sqrt(subs)))
p_exe = c(sdx/sqrt(subs),0)
p_eye = c(sdy/sqrt(subs),0)
cx = c(mean(c1$x), mean(c2$x), mean(c3$x), mean(c4$x),120)
cy = c(mean(c1$y), mean(c2$y), mean(c3$y), mean(c4$y), 120)
names = c('down_back','up_back','up Foward','down_foward','Actual')
#for dots on plot
tshit=data.frame(cx,cy,p_exe,p_eye,names)
qplot(cx,-cy,color=names,shape=names,data=tshit,group=names,ylab = "Y Coordinate", xlab = "X Coordinate")+
ggtitle("A.   Language by Image Orientation") +
theme(plot.title = element_text(lineheight=3, face="bold", color="black", size=29))+
theme(axis.title.y = element_text(size = rel(1.8),angle=90))+
theme(axis.title.x = element_text(size = rel(1.8),angle=0))+
theme(legend.text = element_text(colour = 'black', angle = 0, size = 13, hjust = 3, vjust = 3))+
geom_errorbar(aes(ymin=-cy+p_eye, ymax=-cy-p_eye), width=.1) +
geom_errorbarh(aes(xmin = cx+p_exe, xmax = cx-p_exe),height=.1)+
geom_point(color ="black",size=3)+
geom_line()
# ylim()+
qplot(cx,-cy,color=names,shape=names,data=tshit,group=names,ylab = "Y Coordinate", xlab = "X Coordinate")+
ggtitle("A.   Language by Image Orientation") +
theme(plot.title = element_text(lineheight=3, face="bold", color="black", size=29))+
theme(axis.title.y = element_text(size = rel(1.8),angle=90))+
theme(axis.title.x = element_text(size = rel(1.8),angle=0))+
theme(legend.text = element_text(colour = 'black', angle = 0, size = 13, hjust = 3, vjust = 3))+
geom_errorbar(aes(ymin=-cy+p_eye, ymax=-cy-p_eye), width=.1) +
geom_errorbarh(aes(xmin = cx+p_exe, xmax = cx-p_exe),height=.1)+
geom_point(color ="black",size=3)+
geom_line()+
ylim(0,-400)+
xlim(0,550)
qplot(cx,-cy,color=names,shape=names,data=tshit,group=names,ylab = "Y Coordinate", xlab = "X Coordinate")+
ggtitle("A.   Language by Image Orientation") +
theme(plot.title = element_text(lineheight=3, face="bold", color="black", size=29))+
theme(axis.title.y = element_text(size = rel(1.8),angle=90))+
theme(axis.title.x = element_text(size = rel(1.8),angle=0))+
theme(legend.text = element_text(colour = 'black', angle = 0, size = 13, hjust = 3, vjust = 3))+
geom_errorbar(aes(ymin=-cy+p_eye, ymax=-cy-p_eye), width=.1) +
geom_errorbarh(aes(xmin = cx+p_exe, xmax = cx-p_exe),height=.1)+
geom_point(color ="black",size=3)+
geom_line()+
ylim(-400,0)+
xlim(0,550)
qplot(cx,-cy,color=names,shape=names,data=tshit,group=names,ylab = "Y Coordinate", xlab = "X Coordinate")+
geom_tile(aes(fill=names))+
ggtitle("A.   Language by Image Orientation") +
theme(plot.title = element_text(lineheight=3, face="bold", color="black", size=29))+
theme(axis.title.y = element_text(size = rel(1.8),angle=90))+
theme(axis.title.x = element_text(size = rel(1.8),angle=0))+
theme(legend.text = element_text(colour = 'black', angle = 0, size = 13, hjust = 3, vjust = 3))+
geom_errorbar(aes(ymin=-cy+p_eye, ymax=-cy-p_eye), width=.1) +
geom_errorbarh(aes(xmin = cx+p_exe, xmax = cx-p_exe),height=.1)+
geom_point(color ="black",size=3)+
geom_line()+
ylim(-400,0)+
xlim(0,550)
qplot(cx,-cy,color=names,shape=names,data=tshit,group=names,ylab = "Y Coordinate", xlab = "X Coordinate")+
geom_tile(aes(fill=names),color="white")+
ggtitle("A.   Language by Image Orientation") +
theme(plot.title = element_text(lineheight=3, face="bold", color="black", size=29))+
theme(axis.title.y = element_text(size = rel(1.8),angle=90))+
theme(axis.title.x = element_text(size = rel(1.8),angle=0))+
theme(legend.text = element_text(colour = 'black', angle = 0, size = 13, hjust = 3, vjust = 3))+
geom_errorbar(aes(ymin=-cy+p_eye, ymax=-cy-p_eye), width=.1) +
geom_errorbarh(aes(xmin = cx+p_exe, xmax = cx-p_exe),height=.1)+
geom_point(color ="black",size=3)+
geom_line()+
ylim(-400,0)+
xlim(0,550)
# ylim()+
qplot(cx,-cy,data=tshit,group=names,ylab = "Y Coordinate", xlab = "X Coordinate")+
geom_tile(aes(fill=names),color="white")+
ggtitle("A.   Language by Image Orientation") +
theme(plot.title = element_text(lineheight=3, face="bold", color="black", size=29))+
theme(axis.title.y = element_text(size = rel(1.8),angle=90))+
theme(axis.title.x = element_text(size = rel(1.8),angle=0))+
theme(legend.text = element_text(colour = 'black', angle = 0, size = 13, hjust = 3, vjust = 3))+
geom_errorbar(aes(ymin=-cy+p_eye, ymax=-cy-p_eye), width=.1) +
geom_errorbarh(aes(xmin = cx+p_exe, xmax = cx-p_exe),height=.1)+
geom_point(color ="black",size=3)+
geom_line()+
ylim(-400,0)+
xlim(0,550)
View(dtable)
library(phia)
library(lsr)
### functions ###
stderr <- function(x) sqrt(var(x,na.rm=TRUE)/length(na.omit(x)))
deg2rad <- function(deg) {(deg * pi) / (180)}
setwd('~/Documents/projects/Vinson_etal_zwaan/Analysis/exp1/exp1_data/')
files <- list.files(pattern = "[.]txt$")
raw2clean <-function(files){
results = data.frame(run=1:length(files),sub=0,x=0,y=0,conf=0,rt=0,dir=0,lang=0,sent=0,xi=0,yi=0)
for (run in 1:length(files)){
print(run)
file <- read.delim(files[run], sep="\t", header=FALSE)
results[run,]$rt = tail(file)[6,2]
results[run,]$sub=as.numeric(as.character(unlist(file[2,]$V1)))
results[run,]$x=as.numeric(unlist(file[2,]$V2))
results[run,]$y=as.numeric(unlist(file[2,]$V3))
results[run,]$conf=as.numeric(unlist(file[2,]$V4))
results[run,]$lang=as.character(unlist(file[2,]$V5))
results[run,]$dir=as.character(unlist(file[2,]$V6))
results[run,]$sent=as.character(unlist(file[2,]$V7))
}
}
raw2clean(list.files(pattern="[.]txt$"))
raw2clean <-function(files){
results = data.frame(run=1:length(files),sub=0,x=0,y=0,conf=0,rt=0,dir=0,lang=0,sent=0,xi=0,yi=0)
for (run in 1:length(files)){
print(run)
file <- read.delim(files[run], sep="\t", header=FALSE)
results[run,]$rt = tail(file)[6,2]
results[run,]$sub=as.numeric(as.character(unlist(file[2,]$V1)))
results[run,]$x=as.numeric(unlist(file[2,]$V2))
results[run,]$y=as.numeric(unlist(file[2,]$V3))
results[run,]$conf=as.numeric(unlist(file[2,]$V4))
results[run,]$lang=as.character(unlist(file[2,]$V5))
results[run,]$dir=as.character(unlist(file[2,]$V6))
results[run,]$sent=as.character(unlist(file[2,]$V7))
}
return results
}
raw2clean(list.files(pattern="[.]txt$"))
raw2clean <-function(files){
results = data.frame(run=1:length(files),sub=0,x=0,y=0,conf=0,rt=0,dir=0,lang=0,sent=0,xi=0,yi=0)
for (run in 1:length(files)){
print(run)
file <- read.delim(files[run], sep="\t", header=FALSE)
results[run,]$rt = tail(file)[6,2]
results[run,]$sub=as.numeric(as.character(unlist(file[2,]$V1)))
results[run,]$x=as.numeric(unlist(file[2,]$V2))
results[run,]$y=as.numeric(unlist(file[2,]$V3))
results[run,]$conf=as.numeric(unlist(file[2,]$V4))
results[run,]$lang=as.character(unlist(file[2,]$V5))
results[run,]$dir=as.character(unlist(file[2,]$V6))
results[run,]$sent=as.character(unlist(file[2,]$V7))
}
return (results)
}
raw2clean(list.files(pattern="[.]txt$"))
r <- raw2clean(list.files(pattern="[.]txt$"))
setwd('~/Documents/projects/Vinson_etal_zwaan/Analysis/exp3/3a/')
exp3a <- raw2clean(list.files(pattern="[.]txt$"))
View(exp3a)
View(r)
source('../../functions.R')
source('../../functions.R')
setwd('~/Users/Dave/Documents/github/Vinson-Implied-motion-language')
setwd('/Users/Dave/Documents/github/Vinson-Implied-motion-language')
source('../../functions.R')
source('functions.R')
list.files(pattern="[.]txt$")
f = list.files(pattern="[.]txt$")
setwd('~/Documents/projects/Vinson_etal_zwaan/Analysis/exp3/3a/')
f = list.files(pattern="[.]txt$")
library(lca)
install.packages("lca")
length(f)
print.percent(1,length(files))
#files <- list.files(pattern = "[.]txt$") #how to list files
results = data.frame(run=1:length(files),sub=0,x=0,y=0,conf=0,rt=0,dir=0,lang=0,sent=0,xi=0,yi=0)
for (run in 1:length(files)){
print(run)
file <- read.delim(files[run], sep="\t", header=FALSE)
results[run,]$rt = tail(file)[6,2]
results[run,]$sub=as.numeric(as.character(unlist(file[2,]$V1)))
results[run,]$x=as.numeric(unlist(file[2,]$V2))
results[run,]$y=as.numeric(unlist(file[2,]$V3))
results[run,]$conf=as.numeric(unlist(file[2,]$V4))
results[run,]$lang=as.character(unlist(file[2,]$V5))
results[run,]$dir=as.character(unlist(file[2,]$V6))
results[run,]$sent=as.character(unlist(file[2,]$V7))
}
return (results)
}
print.percent(1,length(files))
print.percentage(1,length(files))
raw2clean <-function(files){
print.percentage(1,length(files))
#files <- list.files(pattern = "[.]txt$") #how to list files
results = data.frame(run=1:length(files),sub=0,x=0,y=0,conf=0,rt=0,dir=0,lang=0,sent=0,xi=0,yi=0)
for (run in 1:length(files)){
print(run)
file <- read.delim(files[run], sep="\t", header=FALSE)
results[run,]$rt = tail(file)[6,2]
results[run,]$sub=as.numeric(as.character(unlist(file[2,]$V1)))
results[run,]$x=as.numeric(unlist(file[2,]$V2))
results[run,]$y=as.numeric(unlist(file[2,]$V3))
results[run,]$conf=as.numeric(unlist(file[2,]$V4))
results[run,]$lang=as.character(unlist(file[2,]$V5))
results[run,]$dir=as.character(unlist(file[2,]$V6))
results[run,]$sent=as.character(unlist(file[2,]$V7))
}
return (results)
}
exp3a <- raw2clean(list.files(pattern="[.]txt$"))
library(lca)
install.packages("LCA")
library(LCA)
raw2clean <-function(files){
print.percentage(1,length(files))
#files <- list.files(pattern = "[.]txt$") #how to list files
results = data.frame(run=1:length(files),sub=0,x=0,y=0,conf=0,rt=0,dir=0,lang=0,sent=0,xi=0,yi=0)
for (run in 1:length(files)){
print(run)
file <- read.delim(files[run], sep="\t", header=FALSE)
results[run,]$rt = tail(file)[6,2]
results[run,]$sub=as.numeric(as.character(unlist(file[2,]$V1)))
results[run,]$x=as.numeric(unlist(file[2,]$V2))
results[run,]$y=as.numeric(unlist(file[2,]$V3))
results[run,]$conf=as.numeric(unlist(file[2,]$V4))
results[run,]$lang=as.character(unlist(file[2,]$V5))
results[run,]$dir=as.character(unlist(file[2,]$V6))
results[run,]$sent=as.character(unlist(file[2,]$V7))
}
return (results)
}
setwd('/Users/Dave/Documents/github/Vinson-Implied-motion-language')
exp3a <- raw2clean(list.files(pattern="[.]txt$"))
library(LCA)
exp3a <- raw2clean(list.files(pattern="[.]txt$"))
source('functions.R')
setwd('~/Documents/projects/Vinson_etal_zwaan/Analysis/exp1/exp1_data/')
exp1 <- raw2clean(list.files(pattern="[.]txt$"))
setwd('~/Documents/projects/Vinson_etal_zwaan/Analysis/exp3/3a/')
exp3a <- raw2clean(list.files(pattern="[.]txt$"))
results <- rbind(exp1,exp3a)
rm(exp1,exp3a)
rm(results,exp1,exp3a)
library(phia)
library(LCA)
cv = cos(-20*pi/180)
setwd('~/Documents/projects/Vinson_etal_zwaan/Analysis/exp1/exp1_data/')
exp1 <- raw2clean(list.files(pattern="[.]txt$"))
setwd('~/Documents/projects/Vinson_etal_zwaan/Analysis/exp3/3a/')
exp3a <- raw2clean(list.files(pattern="[.]txt$"))
results <- rbind(exp1,exp3a)
rm(exp1,exp3a)
120/cv
410/cv
setwd('~/data/exp1/')
exp1 <- raw2clean(list.files(pattern="[.]txt$"))
setwd('/Users/Dave/Documents/github/Vinson-Implied-motion-language')
setwd('~/data/exp1/')
setwd('/data/exp1/')
setwd('../data/exp1/')
setwd('data/exp1/')
exp1 <- raw2clean(list.files(pattern="[.]txt$"))
source('functions.R')
setwd('/Users/Dave/Documents/github/Vinson-Implied-motion-language')
source('functions.R')
setwd('data/exp1/')
exp1 <- raw2clean(list.files(pattern="[.]txt$"))
file.rename(list.files(pattern=".txt", paste0("", 1:700)))
file.rename(list.files(pattern="data/exp1/.txt", paste0("", 1:700)))
file.rename(list.files(pattern="data/exp1/.txt", paste0(" ", 1:700)))
file.rename(list.files(pattern="data/exp1/[.]txt$", paste0(" ", 1:700)))
file.rename(list.files(pattern="data/exp1/[.]txt$", paste0("exp", 1:700)))
file.rename(list.files(pattern="data/exp1/[.]txt$", paste0("exp_", 1:700)))
file.rename(list.files(pattern="data/exp1/*[.]txt$", paste0("exp", 1:700)))
file.rename(list.files(pattern="data/exp1/*.txt", paste0("exp", 1:700)))
file.rename(list.files(pattern="data/exp1/*.txt", paste0("exp", 1:700,".txt")))
setwd('data/exp1/')
setwd('/Users/Dave/Documents/github/Vinson-Implied-motion-language')
setwd('data/exp1/')
file.rename(list.files(pattern="*.txt", paste0("exp", 1:700,".txt")))
file.rename(list.files(pattern="[.]txt$", paste0("exp", 1:700,".txt")))
file.rename(list.files(pattern="[.]txt$", paste0("", 1:700,)))
fuck <- list.files(pattern="[.]txt$")
numbers <- 1:length(fuck)
file.rename(fuck,paste0(loc.dir,"/",numbers,".txt"))
file.rename(fuck,paste0(numbers,".txt"))
setwd('/Users/Dave/Documents/github/Vinson-Implied-motion-language')
setwd('data/exp3a/')
fuck <- list.files(pattern="[.]txt$")
numbers <- 1:length(fuck)
file.rename(fuck,paste0(numbers,".txt"))
setwd('/Users/Dave/Documents/github/Vinson-Implied-motion-language')
setwd('data/exp2/')
fuck <- list.files(pattern="[.]txt$")
numbers <- 1:length(fuck)
file.rename(fuck,paste0(numbers,".txt"))
setwd('/Users/Dave/Documents/github/Vinson-Implied-motion-language')
setwd('data/exp3b/')
fuck <- list.files(pattern="[.]txt$")
numbers <- 1:length(fuck)
file.rename(fuck,paste0(numbers,".txt"))
setwd('data/exp2/')
exp2 <- raw2clean(list.files(pattern="[.]txt$"))
setwd('data/exp3b/')
exp3b <- raw2clean(list.files(pattern="[.]txt$"))
setwd('/Users/Dave/Documents/github/Vinson-Implied-motion-language')
setwd('data/exp1/')
exp1 <- raw2clean(list.files(pattern="[.]txt$"))
library(phia)
library(lsr)
library(LCA)
source('functions.R')
############################################################################
# Data loading experiment 1
# NOTE: Experiments were originally run as 3 sep experiments Reviewers encourages consolidation into 2 experiments
############################################################################
setwd('data/exp1/')
exp1 <- raw2clean(list.files(pattern="[.]txt$"))
setwd('/Users/Dave/Documents/github/Vinson-Implied-motion-language')
############################################################################
#load functions and libraries
############################################################################
library(phia)
library(lsr)
library(LCA)
source('functions.R')
setwd('data/exp1/')
exp1 <- raw2clean(list.files(pattern="[.]txt$"))
library(phia)
install.packages("phia")
install.packages("lsr")
library(phia)
library(lsr)
library(LCA)
source('functions.R')
setwd('/Users/Dave/Documents/github/Vinson-Implied-motion-language')
source('functions.R')
setwd('data/exp1/')
exp1 <- raw2clean(list.files(pattern="[.]txt$"))
